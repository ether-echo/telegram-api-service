package handler

import (
	"context"
	"github.com/ether-echo/telegram-api-service/pkg/config"
	"github.com/go-telegram/bot"
	"github.com/go-telegram/bot/models"
	"log"
)

type Handler struct {
	botTG *bot.Bot
}

func NewHandler(ctx context.Context, conf *config.Config) *Handler {

	b, err := bot.New(conf.Token)
	if err != nil {
		panic(err)
	}

	commands := []models.BotCommand{
		{Command: "/start", Description: "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"},
		{Command: "/support", Description: "–ü–æ–¥–¥–µ—Ä–∂–∫–∞"},
	}

	_, err = b.SetMyCommands(context.Background(), &bot.SetMyCommandsParams{
		Commands: commands,
	})
	if err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–æ–º–∞–Ω–¥:", err)
	}

	return &Handler{
		botTG: b,
	}
}

func (h *Handler) RegisterHandler(ctx context.Context) {

	h.botTG.RegisterHandler(bot.HandlerTypeMessageText, "/start", bot.MatchTypePrefix, h.startHandler)

	h.botTG.RegisterHandler(bot.HandlerTypeMessageText, "/support", bot.MatchTypePrefix, h.supportHandler)
	h.botTG.RegisterHandler(bot.HandlerTypeMessageText, "üí∫ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", bot.MatchTypePrefix, h.supportHandler)

	h.botTG.Start(ctx)
}

func (h *Handler) startHandler(ctx context.Context, b *bot.Bot, update *models.Update) {
	if update.Message == nil {
		log.Println("Message nil")
		return
	}

	keyboard := &models.ReplyKeyboardMarkup{
		Keyboard: [][]models.KeyboardButton{
			{
				{Text: "üîÆ –†–∞—Å–∫–ª–∞–¥ –¢–ê–†–û"},
				{Text: "üí∏ –ù—É–º–µ—Ä–æ–ª–æ–≥–∏—è"},
			},
			{
				{Text: "üí∫ –ü–æ–¥–¥–µ—Ä–∂–∫–∞"},
			},
		},
		ResizeKeyboard:  true, // –£–º–µ–Ω—å—à–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
		OneTimeKeyboard: false,
	}

	b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID: update.Message.Chat.ID,
		Text: "üîÆ–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è –≤ –º–∏—Ä–µ –¢–ê–†–û.\n\n *–•–æ—á–µ—à—å –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ —Ç–µ–±—è –≤–æ–ø—Ä–æ—Å—ã?*" +
			"\n\n–ú–æ–∏ –∫–∞—Ä—Ç—ã –ø–æ–º–æ–≥—É—Ç –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç—ã –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º:\n" +
			"*- –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å*\n" +
			"*- –¥–µ–Ω—å*\n" +
			"*- –ª—é–±–æ–≤—å*\n" +
			"*- —É—Å–ø–µ—Ö*\n" +
			"*- –±—É–¥—É—â–∏–π –≥–æ–¥*\n" +
			"*–ü–æ–¥–¥–µ—Ä–∂–∫–∞* /support\n" +
			"–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å? –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –≤ —á–∞—Ç\n\n" +
			"–Ø —Å—Ç–∞–Ω—É —Ç–≤–æ–∏–º –ø—Ä–æ–≤–æ–¥–Ω–∏–∫–æ–º –ø–æ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞–º —Å—É–¥—å–±—ã, *–ø–æ–º–æ–≥—É —Ä–∞–∑–≥–∞–¥–∞—Ç—å —Ç–∞–π–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–∞—Ä—Ç* –∏ –ø–æ–¥–µ–ª—é—Å—å –º—É–¥—Ä–æ—Å—Ç—å—é," +
			" –∫–æ—Ç–æ—Ä—É—é —Ç–∞–∏—Ç –≤ —Å–µ–±–µ –±—É–¥—É—â–µ–µ.\n" +
			"üí´ –í—ã–±–µ—Ä–∏ –≤ –º–µ–Ω—é –Ω–∞ —á—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å —Ä–∞—Å–∫–ª–∞–¥ –∏ —Å–ª–µ–¥—É–π –ø–æ–¥—Å–∫–∞–∑–∫–∞–ºüëá",
		ParseMode:   models.ParseModeMarkdownV1,
		ReplyMarkup: keyboard,
	})
}

func (h *Handler) supportHandler(ctx context.Context, b *bot.Bot, update *models.Update) {

	keyboard := &models.InlineKeyboardMarkup{
		InlineKeyboard: [][]models.InlineKeyboardButton{
			{
				{
					Text: "–ù–∞–ø–∏—Å–∞—Ç—å –≤ —á–∞—Ç",
					URL:  "https://t.me/Degprt",
				},
			},
		},
	}

	messageText := "–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å? –ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤ —á–∞—Ç!"

	_, err := b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID:      update.Message.Chat.ID,
		Text:        messageText,
		ReplyMarkup: keyboard,
	})

	if err != nil {
		log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π:", err)
	}

	//linkOptions := &models.LinkPreviewOptions{
	//	URL:           &url,
	//	ShowAboveText: &showText,
	//}

	//b.SendMessage(ctx, &bot.SendMessageParams{
	//	ChatID: update.Message.Chat.ID,
	//	Text: "–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å? –ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤ —á–∞—Ç!\n" +
	//		"–ö–Ω–æ–ø–∫–∞ 1 - http://example1.com\n" +
	//		"–ö–Ω–æ–ø–∫–∞ 2 - http://example2.com",
	//	ReplyMarkup: keyboard,
	//	ParseMode:          models.ParseModeMarkdownV1,
	//})
}

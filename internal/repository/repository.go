package repository

import (
	"context"
	"github.com/ether-echo/telegram-api-service/adapter/producer"
	"github.com/ether-echo/telegram-api-service/internal/model"
	"github.com/ether-echo/telegram-api-service/pkg/config"
	"github.com/ether-echo/telegram-api-service/pkg/logger"
	"github.com/go-telegram/bot"
	"github.com/go-telegram/bot/models"
)

var (
	log = logger.Logger().Named("repository").Sugar()
)

type Repository struct {
	BotTG *bot.Bot
	prod  *producer.KafkaProducer
}

func NewRepository(conf *config.Config, prod *producer.KafkaProducer) *Repository {
	b, err := bot.New(conf.Token)
	if err != nil {
		log.Fatal(err)
	}

	commands := []models.BotCommand{
		{Command: "/start", Description: "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"},
		{Command: "/support", Description: "–ü–æ–¥–¥–µ—Ä–∂–∫–∞"},
	}

	_, err = b.SetMyCommands(context.Background(), &bot.SetMyCommandsParams{
		Commands: commands,
	})
	if err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–æ–º–∞–Ω–¥:", err)
	}

	return &Repository{
		BotTG: b,
		prod:  prod,
	}
}

func (r *Repository) Start(ctx context.Context, b *bot.Bot, update *models.Update) {
	if update.Message == nil {
		log.Info("Message nil")
		return
	}

	keyboard := &models.ReplyKeyboardMarkup{
		Keyboard: [][]models.KeyboardButton{
			{
				{Text: "üîÆ –†–∞—Å–∫–ª–∞–¥ –¢–ê–†–û"},
				{Text: "üí∏ –ù—É–º–µ—Ä–æ–ª–æ–≥–∏—è"},
			},
			{
				{Text: "üí∫ –ü–æ–¥–¥–µ—Ä–∂–∫–∞"},
			},
		},
		ResizeKeyboard:  true, // –£–º–µ–Ω—å—à–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
		OneTimeKeyboard: false,
	}

	b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID: update.Message.Chat.ID,
		Text: "üîÆ–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è –≤ –º–∏—Ä–µ –¢–ê–†–û.\n\n *–•–æ—á–µ—à—å –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ —Ç–µ–±—è –≤–æ–ø—Ä–æ—Å—ã?*" +
			"\n\n–ú–æ–∏ –∫–∞—Ä—Ç—ã –ø–æ–º–æ–≥—É—Ç –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç—ã –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º:\n" +
			"*- –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å*\n" +
			"*- –¥–µ–Ω—å*\n" +
			"*- –ª—é–±–æ–≤—å*\n" +
			"*- —É—Å–ø–µ—Ö*\n" +
			"*- –±—É–¥—É—â–∏–π –≥–æ–¥*\n" +
			"*–ü–æ–¥–¥–µ—Ä–∂–∫–∞* /support\n" +
			"–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å? –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –≤ —á–∞—Ç\n\n" +
			"–Ø —Å—Ç–∞–Ω—É —Ç–≤–æ–∏–º –ø—Ä–æ–≤–æ–¥–Ω–∏–∫–æ–º –ø–æ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞–º —Å—É–¥—å–±—ã, *–ø–æ–º–æ–≥—É —Ä–∞–∑–≥–∞–¥–∞—Ç—å —Ç–∞–π–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–∞—Ä—Ç* –∏ –ø–æ–¥–µ–ª—é—Å—å –º—É–¥—Ä–æ—Å—Ç—å—é," +
			" –∫–æ—Ç–æ—Ä—É—é —Ç–∞–∏—Ç –≤ —Å–µ–±–µ –±—É–¥—É—â–µ–µ.\n" +
			"üí´ –í—ã–±–µ—Ä–∏ –≤ –º–µ–Ω—é –Ω–∞ —á—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å —Ä–∞—Å–∫–ª–∞–¥ –∏ —Å–ª–µ–¥—É–π –ø–æ–¥—Å–∫–∞–∑–∫–∞–ºüëá",
		ParseMode:   models.ParseModeMarkdownV1,
		ReplyMarkup: keyboard,
	})
}

func (r *Repository) Support(ctx context.Context, b *bot.Bot, update *models.Update) {

	keyboard := &models.InlineKeyboardMarkup{
		InlineKeyboard: [][]models.InlineKeyboardButton{
			{
				{
					Text: "–ù–∞–ø–∏—Å–∞—Ç—å –≤ —á–∞—Ç",
					URL:  "https://t.me/Degprt",
				},
			},
		},
	}

	messageText := "–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å? –ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤ —á–∞—Ç!"

	_, err := b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID:      update.Message.Chat.ID,
		Text:        messageText,
		ReplyMarkup: keyboard,
	})

	if err != nil {
		log.Info("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π:", err)
	}
}

var check = false

func (r *Repository) LayoutTARO(ctx context.Context, b *bot.Bot, update *models.Update) {
	if check == false {
		_, err := b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID: update.Message.Chat.ID,
			Text: "–û—Ç–∫—Ä–æ–π—Ç–µ –¥–≤–µ—Ä—å –∫ —Å–≤–æ–µ–º—É –±—É–¥—É—â–µ–º—É —Å –ø–æ–º–æ—â—å—é –∫–∞—Ä—Ç –¢–∞—Ä–æ! \n" +
				"–ö–∞–∂–¥–∞—è –∫–∞—Ä—Ç–∞ –¢–∞—Ä–æ - —ç—Ç–æ –∫–ª—é—á –∫ –≤–∞—à–µ–π —Å—É–¥—å–±–µ, –¥–æ–≤–µ—Ä—å—Ç–µ—Å—å –∏–º –∏ —É–∑–Ω–∞–π—Ç–µ, –∫–∞–∫ –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ—é –∂–∏–∑–Ω—å –∫ –ª—É—á—à–µ–º—É. \n\n" +
				"*–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –≤–∞—Å —Ç—Ä–µ–≤–æ–∂–∏—Ç –∏ –∫–∞—Ä—Ç—ã –ø–æ–¥—Å–∫–∞–∂—É—Ç, –∫–∞–∫–∏–µ —à–∞–≥–∏ –ø—Ä–µ–¥–ø—Ä–∏–Ω—è—Ç—å*.",
			ParseMode: models.ParseModeMarkdownV1,
		})
		if err != nil {
			log.Fatal(err)
		}
		check = true
		return
	}
	_, err := b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID:    update.Message.Chat.ID,
		Text:      "–°—É–¥—å–±–∞ –Ω–µ –ª—é–±–∏—Ç —Å–ª–∏—à–∫–æ–º —É–ø–æ—Ä–Ω—ã—Ö. –Ø —É–º–æ–ª–∫–∞—é –¥–æ –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è.",
		ParseMode: models.ParseModeMarkdownV1,
	})
	if err != nil {
		log.Fatal(err)
	}

}

func (r *Repository) Numerology(ctx context.Context, b *bot.Bot, update *models.Update) {
	b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID: update.Message.Chat.ID,
		Text:   "–î–ª—è –ª–∏—Ü, —Ä–æ–∂–¥–µ–Ω–Ω—ã—Ö –ø–æ–¥ —á–∏—Å–ª–æ–º ??? —Å–µ–≥–æ–¥–Ω—è ...",
	})
}

func (r *Repository) Default(ctx context.Context, b *bot.Bot, update *models.Update) {

	message := model.MessageRequest{
		ChatId:    update.Message.Chat.ID,
		LastName:  update.Message.Chat.LastName,
		FirstName: update.Message.Chat.FirstName,
		Username:  update.Message.Chat.Username,
		Message:   update.Message.Text,
	}

	err := r.prod.SendMessageToKafka(message)
	if err != nil {
		log.Error(err)
	}

}

func (r *Repository) SendMessage(chatId int64, message, url string) {

	var keyboard models.ReplyMarkup

	keyboard = &models.ReplyKeyboardMarkup{
		Keyboard: [][]models.KeyboardButton{
			{
				{Text: "üîÆ –†–∞—Å–∫–ª–∞–¥ –¢–ê–†–û"},
				{Text: "üí∏ –ù—É–º–µ—Ä–æ–ª–æ–≥–∏—è"},
			},
			{
				{Text: "üí∫ –ü–æ–¥–¥–µ—Ä–∂–∫–∞"},
			},
		},
		ResizeKeyboard:  true, // –£–º–µ–Ω—å—à–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
		OneTimeKeyboard: false,
	}

	if url != "" {
		keyboard = &models.InlineKeyboardMarkup{
			InlineKeyboard: [][]models.InlineKeyboardButton{
				{
					{
						Text: "–ù–∞–ø–∏—Å–∞—Ç—å –≤ —á–∞—Ç",
						URL:  url,
					},
				},
			},
		}
	}

	ctx := context.Background()

	r.BotTG.SendMessage(ctx, &bot.SendMessageParams{
		ChatID:      chatId,
		Text:        message + "\n" + url,
		ParseMode:   models.ParseModeMarkdownV1,
		ReplyMarkup: keyboard,
	})
}

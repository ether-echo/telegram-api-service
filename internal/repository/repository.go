package repository

import (
	"context"
	"github.com/ether-echo/telegram-api-service/adapter/producer"
	"github.com/ether-echo/telegram-api-service/internal/model"
	"github.com/ether-echo/telegram-api-service/pkg/config"
	"github.com/ether-echo/telegram-api-service/pkg/logger"
	"github.com/go-telegram/bot"
	"github.com/go-telegram/bot/models"
)

var (
	log = logger.Logger().Named("repository").Sugar()
)

type Repository struct {
	BotTG *bot.Bot
	prod  *producer.KafkaProducer
}

func NewRepository(conf *config.Config, prod *producer.KafkaProducer) *Repository {
	b, err := bot.New(conf.Token)
	if err != nil {
		log.Fatal(err)
	}

	commands := []models.BotCommand{
		{Command: "/start", Description: "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"},
		{Command: "/support", Description: "–ü–æ–¥–¥–µ—Ä–∂–∫–∞"},
	}

	_, err = b.SetMyCommands(context.Background(), &bot.SetMyCommandsParams{
		Commands: commands,
	})
	if err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–æ–º–∞–Ω–¥:", err)
	}

	return &Repository{
		BotTG: b,
		prod:  prod,
	}
}

func (r *Repository) Default(ctx context.Context, b *bot.Bot, update *models.Update) {

	message := model.MessageRequest{
		ChatId:    update.Message.Chat.ID,
		LastName:  update.Message.Chat.LastName,
		FirstName: update.Message.Chat.FirstName,
		Username:  update.Message.Chat.Username,
		Message:   update.Message.Text,
	}

	err := r.prod.SendMessageToKafka(message)
	if err != nil {
		log.Error(err)
	}

}

func (r *Repository) SendMessage(chatId int64, message, url, command string) {

	var keyboard models.ReplyMarkup

	keyboard = &models.ReplyKeyboardMarkup{
		Keyboard: [][]models.KeyboardButton{
			{
				{Text: "üîÆ –†–∞—Å–∫–ª–∞–¥ –¢–ê–†–û"},
				{Text: "üí∏ –ù—É–º–µ—Ä–æ–ª–æ–≥–∏—è"},
			},
		},
		ResizeKeyboard:  true, // –£–º–µ–Ω—å—à–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
		OneTimeKeyboard: true,
	}

	if chatId == 480842950 || chatId == 689105464 {
		keyboard = &models.ReplyKeyboardMarkup{
			Keyboard: [][]models.KeyboardButton{
				{
					{Text: "üîÆ –†–∞—Å–∫–ª–∞–¥ –¢–ê–†–û"},
					{Text: "üí∏ –ù—É–º–µ—Ä–æ–ª–æ–≥–∏—è"},
				},
				{
					{Text: "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"},
				},
			},
			ResizeKeyboard:  true, // –£–º–µ–Ω—å—à–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
			OneTimeKeyboard: true,
		}
	}

	if url != "" {
		keyboard = &models.InlineKeyboardMarkup{
			InlineKeyboard: [][]models.InlineKeyboardButton{
				{
					{
						Text: "–ù–∞–ø–∏—Å–∞—Ç—å –≤ —á–∞—Ç",
						URL:  url,
					},
				},
			},
		}
	}

	if command == "admin" {
		keyboard = &models.ReplyKeyboardMarkup{
			Keyboard: [][]models.KeyboardButton{
				{
					{Text: "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º"},
				},
				{
					{Text: "–í—ã–≤–µ—Å—Ç–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"},
				},
			},
			ResizeKeyboard:  true, // –£–º–µ–Ω—å—à–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
			OneTimeKeyboard: true,
		}
	}

	ctx := context.Background()

	r.BotTG.SendMessage(ctx, &bot.SendMessageParams{
		ChatID:      chatId,
		Text:        message + "\n" + url,
		ParseMode:   models.ParseModeMarkdownV1,
		ReplyMarkup: keyboard,
	})
}
